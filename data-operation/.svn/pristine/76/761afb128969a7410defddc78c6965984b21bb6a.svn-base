package com.hifo.dataoperation.controller;

import com.hifo.dataoperation.entity.BusAdministrative;
import com.hifo.dataoperation.entity.HfDictionary;
import com.hifo.dataoperation.service.setting.AdministrativeService;
import com.hifo.dataoperation.service.setting.DictionaryService;
import com.hifo.dataoperation.service.setting.ModuleService;
import com.hifo.dataoperation.util.Constant;
import com.hifo.dataoperation.util.ExcelUtil;
import com.hifo.dataoperation.vo.DictVO;
import com.hifo.dataoperation.vo.HfDictionaryVO;
import com.hifo.dataoperation.vo.TreeVO;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import springfox.documentation.annotations.ApiIgnore;

import javax.servlet.http.HttpServletResponse;
import java.util.List;
import java.util.Map;

/**
 * @author xmw
 * @date 2019/4/29 11:23
 */
@Api(tags = "设置管理")
@RequestMapping("setting")
@RestController
public class SettingController {

    @Autowired
    private AdministrativeService administrativeService;
    @Autowired
    private DictionaryService dictionaryService;
    @Autowired
    private ModuleService moduleService;

    /**
     * 行政区获取
     *
     * @param entity 城市
     */
    @ApiOperation(value = "行政区获取")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "type", value = "行政区类型", paramType = "query", dataType = "String", example = "1"),
            @ApiImplicitParam(name = "parentId", value = "上级行政区mogoId", paramType = "query", dataType = "String", example = "1"),
            @ApiImplicitParam(name = "parentName", value = "上级行政区名称", paramType = "query", dataType = "String", example = "1")
    })
    @GetMapping("districts")
    public ApiResult districts(@ApiIgnore BusAdministrative entity) {
        return ApiResult.success(administrativeService.listByParams(entity));
    }

    /**
     * 特定城市下的行政区
     *
     * @param entity 城市
     */
    @ApiOperation(value = "特定城市下的行政区")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "parentId", value = "上级行政区mogoId", paramType = "query", dataType = "String", example = "1"),
            @ApiImplicitParam(name = "parentName", value = "上级行政区名称", paramType = "query", dataType = "String", example = "1")
    })
    @GetMapping("districtOfCity")
    public ApiResult districtOfCity(@ApiIgnore BusAdministrative entity) {
        entity.setType("行政区");
        return ApiResult.success(administrativeService.listByParams(entity));
    }

    /**
     * 特定城市下的片区板块
     *
     * @param entity 城市
     */
    @ApiOperation(value = "特定城市下的片区板块")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "parentId", value = "上级行政区mogoId", paramType = "query", dataType = "String", example = "1"),
            @ApiImplicitParam(name = "parentName", value = "上级行政区名称", paramType = "query", dataType = "String", example = "1")
    })
    @GetMapping("blockOfCity")
    public ApiResult blockOfCity(@ApiIgnore BusAdministrative entity) {
        entity.setType("片区");
        return ApiResult.success(administrativeService.listByParams(entity));
    }

    /**
     * 特定城市下的街道
     *
     * @param entity 行政区
     */
    @ApiOperation(value = "特定城市下的街道")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "parentId", value = "上级行政区mogoId", paramType = "query", dataType = "String", example = "1"),
            @ApiImplicitParam(name = "parentName", value = "上级行政区名称", paramType = "query", dataType = "String", example = "1")
    })
    @GetMapping("townOfCity")
    public ApiResult townOfCity(@ApiIgnore BusAdministrative entity) {
        entity.setType("街道");
        return ApiResult.success(administrativeService.listByParams(entity));
    }

    /**
     * 所有字典数据
     */
    @ApiOperation(value = "所有字典数据")
    @GetMapping("dictList")
    public ApiResult<List<HfDictionary>> dictList() {
        List<HfDictionary> list = dictionaryService.query();
        return ApiResult.success(list);
    }

    /**
     * 特定分类下的字典数据
     *
     * @param id       分类id
     * @param category 分类
     */
    @ApiOperation(value = "特定分类下的字典数据")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "id", value = "分类id", paramType = "query", dataType = "Long", example = "130"),
            @ApiImplicitParam(name = "category", value = "分类", paramType = "query", dataType = "String", example = "客户分类")
    })
    @GetMapping("dictionary")
    public ApiResult<List<HfDictionary>> dictionary(Long id, String category) {
        List<HfDictionary> list = dictionaryService.query(id, category);
        return ApiResult.success(list);
    }

    /**
     * 特定分类下的字典数据-用于别名取用
     *
     * @param id       分类id
     * @param category 分类
     */
    @ApiOperation(value = "特定分类下的字典数据-用于别名取用")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "id", value = "分类id", paramType = "query", dataType = "Long", example = "130"),
            @ApiImplicitParam(name = "category", value = "分类", paramType = "query", dataType = "String", example = "客户分类")
    })
    @GetMapping("dictionaryTitle")
    public ApiResult<List<HfDictionaryVO>> dictionaryTitle(Long id, String category) {
        List<HfDictionaryVO> list = dictionaryService.queryTitle(id, category);
        return ApiResult.success(list);
    }

    /**
     * bool类型可选值列表
     */
    @ApiOperation(value = "bool类型可选值列表")
    @GetMapping("boolOption")
    public ApiResult<List<Map<String, String>>> boolOption() {
        return ApiResult.success(Constant.BOOL_LIST);
    }

    /**
     * 是否有电梯可选值列表
     */
    @ApiOperation(value = "是否有电梯可选值列表")
    @GetMapping("liftOption")
    public ApiResult<List<Map<String, String>>> liftOption() {
        return ApiResult.success(Constant.LIFT_LIST);
    }

    /**
     * 所有字典数据,字典项字符串
     */
    @ApiOperation(value = "所有字典数据,字典项字符串")
    @GetMapping("dictItemsList")
    public ApiResult dictItemsList() {
        List<DictVO> list = dictionaryService.dictItemsList();
        return ApiResult.success(list);
    }

    /**
     * 下载数据字典
     */
    @ApiOperation(value = "下载数据字典", produces = "application/octet-stream")
    @GetMapping("downloadDict")
    public void downloadDict(HttpServletResponse response) {
        List<DictVO> list = dictionaryService.dictItemsList();
        ExcelUtil.exportExcel(list, "标准数据说明", "标准数据说明", DictVO.class, "导入项标准数据说明.xls", response);
    }

    /**
     * 获取模块树
     */
    @ApiOperation(value = "获取模块树")
    @GetMapping("moduleTree")
    public ApiResult<TreeVO> moduleTree() {
        return ApiResult.success(moduleService.moduleTree());
    }

}
