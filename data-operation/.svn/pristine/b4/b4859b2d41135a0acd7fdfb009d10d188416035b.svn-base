package com.hifo.dataoperation.service.setting.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Service;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.hifo.dataoperation.base.MybatisPlusService;
import com.hifo.dataoperation.entity.BusAdministrative;
import com.hifo.dataoperation.mapper.setting.BusAdministrativeMapper;
import com.hifo.dataoperation.pagination.Pagination;
import com.hifo.dataoperation.service.base.BasicService;
import com.hifo.dataoperation.service.setting.AdministrativeService;
import com.hifo.dataoperation.util.StringUtil;

import lombok.var;

/**
 * 各个机构独立设置行政区划服务
 *
 * @author 杨捷
 * @Date 2019年4月23日
 */
@Service
@Scope("prototype")
public class AdministrativeServiceImpl extends MybatisPlusService<BusAdministrativeMapper, BusAdministrative> implements AdministrativeService {

    @Autowired
    private BasicService basicService;

    /**
     * 更新行政区划
     *
     * @param entity
     * @return 是否成功
     */
    @Override
    public boolean updateAdministrative(BusAdministrative entity) {
        if (entity != null) {


            QueryWrapper<BusAdministrative> updateWrapper = new QueryWrapper<BusAdministrative>();
            updateWrapper.eq("mongoId", entity.getMongoId()).eq("organizationId", basicService.getLoginEmployee().getOrganizationId());
            return this.update(entity, updateWrapper);
        }

        return false;
    }

    /**
     * 按照城市筛选，返回该城市下的所有下属区县，街道
     *
     * @return
     */
    @Override
    public List<BusAdministrative> list(Pagination pages, BusAdministrative parmEntity) {
        if (parmEntity != null && parmEntity.getMongoId() != null) {
            initParm(parmEntity);
            Integer organizationId = basicService.getLoginEmployee().getOrganizationId();
            QueryWrapper<BusAdministrative> query = new QueryWrapper<BusAdministrative>();
            query.eq("mongoId", parmEntity.getMongoId()).eq("organizationId", organizationId);
            BusAdministrative entity = baseMapper.selectOne(query);
            if (entity != null) {
                // 添加机构
                parmEntity.setOrganizationId(organizationId);

                String regionId = entity.getRegionId().replace("0", " ").trim().replace(" ", "0");
                if (regionId.length() < 2) {
                    regionId = regionId + "0";
                }
                parmEntity.setRegionId(regionId);
                return baseMapper.query(pages, parmEntity);
            }
        }
        return null;
    }

    private void initParm(BusAdministrative parmEntity) {
        if (parmEntity.getParentId() != null && parmEntity.getParentId().equals("")) {
            parmEntity.setParentId(null);
        }
        if (parmEntity.getName() != null && parmEntity.getName().equals("")) {
            parmEntity.setName(null);
        }
    }


    @Override
    public List<BusAdministrative> listByParams(BusAdministrative entity) {
        var organizationId = basicService.getLoginEmployee().getOrganizationId();
        var query = new QueryWrapper<BusAdministrative>();
        query.eq("organizationId", organizationId);
        if (StringUtil.isNotEmpty(entity.getType())) {
            query.eq("type", entity.getType());
        }
        if (StringUtil.isNotEmpty(entity.getParentName())) {
            query.eq("parentName", entity.getParentName());
        }
        if (entity.getParentId() != null) {
            query.eq("parentId", entity.getParentId());
        }
        return baseMapper.selectList(query);
    }

    @Override
    public Map<String, String> getMapByParentId(String parentId) {
        var list = baseMapper.selectList(new QueryWrapper<BusAdministrative>().and(query -> new QueryWrapper<BusAdministrative>().eq("parentId", parentId)).or().eq("mongoId", parentId));
        Map<String, String> map = new HashMap<>(list.size());
        list.stream().forEach(e -> {
            map.put(e.getMongoId(), e.getName());
        });
        return map;
    }

}
