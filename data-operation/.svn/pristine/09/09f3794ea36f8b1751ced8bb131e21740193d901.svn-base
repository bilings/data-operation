package com.hifo.dataoperation.service.avgprice.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Pattern;

import org.bson.types.ObjectId;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.data.mongodb.core.aggregation.Aggregation;
import org.springframework.data.mongodb.core.aggregation.GroupOperation;
import org.springframework.data.mongodb.core.aggregation.MatchOperation;
import org.springframework.data.mongodb.core.aggregation.ProjectionOperation;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.stereotype.Service;

import com.hifo.dataoperation.controller.ApiResult;
import com.hifo.dataoperation.dao.BusEstateAvgPriceDao;
import com.hifo.dataoperation.dao.BusEstateDao;
import com.hifo.dataoperation.dto.BusEstateAvgPriceEtyDto;
import com.hifo.dataoperation.entity.BusEstate;
import com.hifo.dataoperation.entity.ExtEmployee;
import com.hifo.dataoperation.entity.mongo.BusEstateAvgPriceEty;
import com.hifo.dataoperation.enums.BuildingTypeEnum;
import com.hifo.dataoperation.pagination.Pagination;
import com.hifo.dataoperation.service.avgprice.BusAvgPriceService;
import com.hifo.dataoperation.service.base.BasicService;
import com.hifo.dataoperation.service.setting.AdministrativeService;
import com.hifo.dataoperation.util.StringUtil;

import lombok.var;

@SuppressWarnings({ "deprecation", "rawtypes" })
@Service
public class BusAvgPriceServoiceImpl implements BusAvgPriceService {

	@Autowired
	private BusEstateAvgPriceDao busEstateAvgPriceDao;

	@Autowired
	private AdministrativeService administrativeService;

	@Autowired
	private BasicService basicService;

	@Autowired
	private BusEstateDao busEstateDao;

	@Override
	public Pagination<BusEstateAvgPriceEty> findByPage(BusEstateAvgPriceEtyDto busEstateAvgPriceEtyDto,
			Pagination page) {
		// 查询子集行政区
		var map = administrativeService.getMapByParentId(busEstateAvgPriceEtyDto.getCityId());
		// 获取登录用户
		var employee = basicService.getLoginEmployee();
		Query query = findListQuery(busEstateAvgPriceEtyDto, employee, page);
		Pagination<BusEstateAvgPriceEty> busEstateAvgPriceEtyDtoList = busEstateAvgPriceDao.getPageLists(page.getPage(),
				page.getLimit(), query);
		busEstateAvgPriceEtyDtoList.getRecords().stream().forEach(e -> {
			if (StringUtil.isEmpty(e.getCityId())) {
				e.setCityName(map.get(e.getCityId()));
			}
			if (StringUtil.isEmpty(e.getDistrictId())) {
				e.setDistrictName(map.get(e.getDistrictId()));
			}
		});
		return busEstateAvgPriceEtyDtoList;
	}

	/**
	 * 格式化列表查询条件
	 * 
	 * @param apd
	 *            楼盘均价查询参数实例
	 * @param employee
	 *            登陆用户
	 * @param page
	 *            分页参数
	 * @return Query
	 */
	private Query findListQuery(BusEstateAvgPriceEtyDto apd, ExtEmployee employee, Pagination page) {
		Query query = new Query();
		Criteria criteria = new Criteria();
		// 城市
		if (StringUtil.isNotEmpty(apd.getCityId())) {
			criteria.and("cityId").is(apd.getCityId());
		}
		// 区域
		if (StringUtil.isNotEmpty(apd.getDistrictId())) {
			criteria.and("districtId").is(apd.getDistrictId());
		}
		// 区域名
		if (StringUtil.isNotEmpty(apd.getDistrictName())) {
			criteria.and("districtName").is(apd.getDistrictName());
		}
		// 楼盘名称模糊查询
		if (StringUtil.isNotEmpty(apd.getEstateName())) {
			Pattern pattern = Pattern.compile("^.*" + apd.getEstateName() + ".*$", Pattern.CASE_INSENSITIVE);
			criteria.orOperator(Criteria.where("estateName").regex(pattern));
		}
		// 建筑类型
		if (StringUtil.isNotEmpty(apd.getBuildingType())) {
			criteria.and("buildingType").is(apd.getBuildingType());
		}
		// 案例区间
		if (StringUtil.isNotEmpty(apd.getCaseNoMin()) && StringUtil.isNotEmpty(apd.getCaseNoMax())) {
			criteria.and("caseNo").gte(apd.getCaseNoMin()).lte(apd.getCaseNoMin());
		}
		// 时间区间
		if (StringUtil.isNotEmpty(apd.getCalDateStart()) && StringUtil.isNotEmpty(apd.getCalDateEnd())) {
			criteria.and("calDate").gte(apd.getCalDateStart()).lte(apd.getCalDateEnd());
		}
		// 环比区间
		if (StringUtil.isNotEmpty(apd.getMonthGainMin()) && StringUtil.isNotEmpty(apd.getMonthGainMax())) {
			criteria.and("monthGain").gte(apd.getMonthGainMin()).lte(apd.getMonthGainMax());
		}
		query.addCriteria(criteria);
		if (StringUtil.isEmpty(page.ascs()) && StringUtil.isEmpty(page.descs())) {
			query.with(new Sort(new Sort.Order(Sort.Direction.ASC, "calDate")));
		}
		return query;
	}

	@Override
	public ApiResult buildingType() {
		// 第一步：挑选所需的字段，类似select *，*所代表的字段内容
		ProjectionOperation op1 = Aggregation.project("buildingCategoryCode", "buildingCategory");
		
		// 第二步：sql where 语句筛选符合条件的记录
		MatchOperation op2 = Aggregation.match(Criteria.where("buildingCategoryCode").exists(true).and("buildingCategory").exists(true));
		 
		// 第三步：分组条件，设置分组字段
		GroupOperation op3 = Aggregation.group("buildingCategoryCode", "buildingCategory");

		// 第四步：重新挑选字段
		ProjectionOperation op4 =  Aggregation.project("buildingCategoryCode", "buildingCategory");

		//查询
		List<BusEstate> el = busEstateDao.groupFind(op1,op2,op3,op4);
		
		//结果处理
		if(null == el || el.size() == 0){
			ApiResult.failed("未查询到建筑类型数据");
		}
		List<Map<String,String>> list = new ArrayList<>();
		el.forEach(e -> {
			Map<String,String> m = new HashMap<>();
			m.put("type", e.getBuildingCategoryCode());
			m.put("name", e.getBuildingCategory());
			list.add(m);
		});
		return ApiResult.success(list);
	}

	@Override
	public ApiResult hideOrShow(String[] ids, BusEstateAvgPriceEtyDto ba) {
		busEstateAvgPriceDao.updateByIds(ids, ba);
		return ApiResult.success("修改成功");
	}

	@Override
	public ApiResult addAvgPrice(BusEstateAvgPriceEtyDto ba) {
		String estateId = ba.getEstateId();
		// 根据楼盘id获取楼盘信息
		BusEstate be = busEstateDao.selectById(estateId, BusEstate.class);
		if (null == be) {
			return ApiResult.failed("无选择楼盘信息，新增均价失败");
		}
		// 设置均价信息中相应的楼盘信息
		ba.setId(new ObjectId().toString());
		ba.setEstateName(be.getName());
		ba.setCityId(be.getCityId());
		ba.setCityName(be.getCityName());
		ba.setDistrictId(be.getDistrictId());
		ba.setDistrictName(be.getDistrictName());
		ba.setBuildingTypeName(BuildingTypeEnum.getName(ba.getBuildingType()));
		ba.setAvgPriceManual(ba.getAvgPriceSys());
		ba.setAvgPriceCoe(ba.getAvgPriceSys());
		ba.setStandAcreage(Float.parseFloat(be.getGrossBuildArea()));

		// 插入保存均价信息
		busEstateAvgPriceDao.insert(ba);
		return ApiResult.success("新增均价成功");
	}
}
