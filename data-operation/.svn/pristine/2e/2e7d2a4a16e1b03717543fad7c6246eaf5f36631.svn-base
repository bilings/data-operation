package com.hifo.dataoperation.service.avgprice.impl;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Pattern;

import org.bson.types.ObjectId;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.aggregation.Aggregation;
import org.springframework.data.mongodb.core.aggregation.AggregationOperation;
import org.springframework.data.mongodb.core.aggregation.AggregationResults;
import org.springframework.data.mongodb.core.aggregation.MatchOperation;
import org.springframework.data.mongodb.core.aggregation.ProjectionOperation;
import org.springframework.data.mongodb.core.aggregation.UnwindOperation;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.stereotype.Service;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.hifo.dataoperation.controller.ApiResult;
import com.hifo.dataoperation.dao.BusAvgPriceMgDao;
import com.hifo.dataoperation.dao.BusEstateDao;
import com.hifo.dataoperation.dto.BusAvgPriceMgEtyDto;
import com.hifo.dataoperation.entity.BusEstate;
import com.hifo.dataoperation.entity.ExtEmployee;
import com.hifo.dataoperation.entity.mongo.BusAvgPriceMgEty;
import com.hifo.dataoperation.enums.BuildingTypeEnum;
import com.hifo.dataoperation.pagination.Pagination;
import com.hifo.dataoperation.service.avgprice.BusAvgPriceMgService;
import com.hifo.dataoperation.service.base.BasicService;
import com.hifo.dataoperation.service.setting.AdministrativeService;
import com.hifo.dataoperation.util.StringUtil;

import lombok.var;

/**
 * 均价管理实现service
 * @author weisibin
 * @date 2020年4月8日19:02:39
 */
@SuppressWarnings({ "deprecation", "rawtypes" })
@Service
public class BusAvgPriceMgServiceImpl implements BusAvgPriceMgService {

	@Autowired
	private BusAvgPriceMgDao busAvgPriceMgDao;

	@Autowired
	private AdministrativeService administrativeService;

	@Autowired
	private BasicService basicService;

	@Autowired
	private BusEstateDao busEstateDao;
	
	@Autowired
	protected MongoTemplate mongoTemplate;
	
	@Override
	public Pagination<BusAvgPriceMgEty> findByPage(BusAvgPriceMgEtyDto busEstateAvgPriceEtyDto,
			Pagination page) {
		// 查询子集行政区
		var map = administrativeService.getMapByParentId(busEstateAvgPriceEtyDto.getCityId());
		// 获取登录用户
		var employee = basicService.getLoginEmployee();
		Query query = findListQuery(busEstateAvgPriceEtyDto, employee, page);
		Pagination<BusAvgPriceMgEty> busEstateAvgPriceEtyDtoList = busAvgPriceMgDao.getPageLists(page.getPage(),
				page.getLimit(), query);
		busEstateAvgPriceEtyDtoList.getRecords().stream().forEach(e -> {
			if (StringUtil.isEmpty(e.getCityId())) {
				e.setCityName(map.get(e.getCityId()));
			}
			if (StringUtil.isEmpty(e.getDistrictId())) {
				e.setDistrictName(map.get(e.getDistrictId()));
			}
		});
		return busEstateAvgPriceEtyDtoList;
	}

	/**
	 * 格式化列表查询条件
	 * 
	 * @param apd
	 *            楼盘均价查询参数实例
	 * @param employee
	 *            登陆用户
	 * @param page
	 *            分页参数
	 * @return Query
	 */
	private Query findListQuery(BusAvgPriceMgEtyDto apd, ExtEmployee employee, Pagination page) {
		Query query = new Query();
		Criteria criteria = new Criteria();
		// 城市
		if (StringUtil.isNotEmpty(apd.getId())) {
			criteria.and("id").is(apd.getId());
		}
		// 城市
		if (StringUtil.isNotEmpty(apd.getCityId())) {
			criteria.and("cityId").is(apd.getCityId());
		}
		// 区域
		if (StringUtil.isNotEmpty(apd.getDistrictId())) {
			criteria.and("districtId").is(apd.getDistrictId());
		}
		// 区域名
		if (StringUtil.isNotEmpty(apd.getDistrictName())) {
			criteria.and("districtName").is(apd.getDistrictName());
		}
		// 楼盘名称模糊查询
		if (StringUtil.isNotEmpty(apd.getCommunityName())) {
			Pattern pattern = Pattern.compile("^.*" + apd.getCommunityName() + ".*$", Pattern.CASE_INSENSITIVE);
			criteria.orOperator(Criteria.where("communityName").regex(pattern));
		}
		// 建筑类型
		if (StringUtil.isNotEmpty(apd.getBuildingType())) {
			criteria.and("buildingType").is(apd.getBuildingType());
		}
		// 案例区间
		if (StringUtil.isNotEmpty(apd.getCaseNoMin()) && StringUtil.isNotEmpty(apd.getCaseNoMax())) {
			criteria.and("caseNo").gte(apd.getCaseNoMin()).lte(apd.getCaseNoMin());
		}
		// 时间区间
		if (StringUtil.isNotEmpty(apd.getCalDateStart()) && StringUtil.isNotEmpty(apd.getCalDateEnd())) {
			criteria.and("calDate").gte(apd.getCalDateStart()).lte(apd.getCalDateEnd());
		}
		// 环比区间
		if (StringUtil.isNotEmpty(apd.getMonthGainMin()) && StringUtil.isNotEmpty(apd.getMonthGainMax())) {
			criteria.and("monthGain").gte(apd.getMonthGainMin()).lte(apd.getMonthGainMax());
		}
		query.addCriteria(criteria);
		if (StringUtil.isEmpty(page.ascs()) && StringUtil.isEmpty(page.descs())) {
			query.with(new Sort(new Sort.Order(Sort.Direction.ASC, "calDate")));
		}
		return query;
	}


	@Override
	public ApiResult buildingType() {
		return ApiResult.success(BuildingTypeEnum.toArray());
	}

	@Override
	public ApiResult hideOrShow(String[] ids, BusAvgPriceMgEtyDto ba) {
		busAvgPriceMgDao.updateByIds(ids, ba);
		return ApiResult.success("修改成功");
	}

	@Override
	public ApiResult addAvgPrice(BusAvgPriceMgEtyDto ba) {
		String estateId = ba.getCommunityId();
		// 根据楼盘id获取楼盘信息
		BusEstate be = busEstateDao.selectById(estateId, BusEstate.class);
		if (null == be) {
			return ApiResult.failed("无选择楼盘信息，新增均价失败");
		}
		// 设置均价信息中相应的楼盘信息
		ba.setId(new ObjectId().toString());
		ba.setCommunityName(be.getName());
		ba.setCityId(be.getCityId());
		ba.setCityName(be.getCityName());
		ba.setDistrictId(be.getDistrictId());
		ba.setDistrictName(be.getDistrictName());
		ba.setBuildingTypeName(BuildingTypeEnum.getName(ba.getBuildingType()));
		ba.setAvgPriceManual(ba.getAvgPriceManual());
		if(null != be.getGrossBuildArea()){
			ba.setStandAcreage(Float.parseFloat(be.getGrossBuildArea()));
		}
		
		
		
		
		//组合面积段
		String [] ss = ba.getAreaSegment().split("-");
		ba.setAreasSection(Arrays.asList(ss));
		
		// 插入保存均价信息
		busAvgPriceMgDao.insert(ba);
		return ApiResult.success("新增均价成功");
	}

	@Override
	public ApiResult editAvgPriceManual(BusAvgPriceMgEtyDto ba) {
		busAvgPriceMgDao.updateById(ba.getId(), ba);
		return ApiResult.success("编辑人工均价成功");
	}

	@Override
	public ApiResult applyPrice(BusAvgPriceMgEtyDto ba) {
		//改变修改状态
		ba.setIsEditPriceAvgPrice("1");
		busAvgPriceMgDao.updateById(ba.getId(), ba);	
		return ApiResult.success("修正系统均价成功");
	}

	@Override
	public ApiResult estateBuildingType(BusEstate be) {
		be = busEstateDao.selectById(be.getId(), BusEstate.class);
		// 结果处理
		if (be == null) {
			return ApiResult.failed("没查询到楼盘");
		}
		if(be.getBuildingCategory() == null){
			return ApiResult.failed("此楼盘没有建筑类型");
		}
		String [] bcs = be.getBuildingCategory().split(",");
		List<Map<String, String>> list = new ArrayList<>();
		Map<String, String> m = null;
		for (String s : bcs) {
			if(s.isEmpty()){
				break;
			}
			m = new HashMap<>();
			m.put("type", BuildingTypeEnum.getType(s));
			m.put("name", s);
			list.add(m);
		}
		return ApiResult.success(list);
	}

	@Override
	public ApiResult areasSection(BusEstate be) {
		//封装对象列表查询条件
        List<AggregationOperation> commonOperations = new ArrayList<>();
        //1. 指定查询主文档
        MatchOperation match = Aggregation.match(Criteria.where("_id").is(be.getId()));
        commonOperations.add(match);
        //2. 指定投影，返回哪些字段
        ProjectionOperation project = Aggregation.project("qualityDetail");
        commonOperations.add(project);
        //3. 拆分内嵌文档
        UnwindOperation unwind = Aggregation.unwind("qualityDetail");
        commonOperations.add(unwind);
        //4. 指定查询子文档
        MatchOperation match2 = Aggregation.match(
                Criteria.where("qualityDetail.categoryArea").exists(true));
        commonOperations.add(match2);
        //创建管道查询对象
        Aggregation aggregation = Aggregation.newAggregation(commonOperations);
        AggregationResults<JSONObject> reminds = mongoTemplate
                .aggregate(aggregation, busEstateDao.getCollectionName(), JSONObject.class);
        List<JSONObject> mappedResults = reminds.getMappedResults();
        
        List<String> ls = new ArrayList<>();
        //如果查询没结果
        if(null == mappedResults || mappedResults.size()==0){
        	return ApiResult.failed("没有查询到对应面积段");
        }
        //获取categoryArea字段的值的JSONArray对象，之后再解析
		JSONArray jos = mappedResults.get(0).getJSONObject("qualityDetail").getJSONObject("categoryArea")
				.getJSONArray(BuildingTypeEnum.getName(be.getBuildingCategoryCode()));
		//如果获取节点没数据
		if(null == jos){
			return ApiResult.failed("没有查询到对应面积段");
		}
		//构建数据结构
		for (int i = 0; i < jos.size(); i++) {
			List<String> as = JSONArray.parseArray(jos.getJSONObject(i).get("areasSection").toString(), String.class);
			ls.add(as.get(0)+"-"+as.get(1));
		}
		return ApiResult.success(ls);
	}
}
