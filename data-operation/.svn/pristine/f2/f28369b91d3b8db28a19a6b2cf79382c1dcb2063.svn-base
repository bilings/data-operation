package com.hifo.dataoperation.service.estate.impl;

import cn.afterturn.easypoi.excel.entity.ExportParams;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.hifo.dataoperation.base.MybatisPlusService;
import com.hifo.dataoperation.config.CommonThreadPool;
import com.hifo.dataoperation.controller.ApiResult;
import com.hifo.dataoperation.dao.BusBuildingDao;
import com.hifo.dataoperation.dao.BusEstateDao;
import com.hifo.dataoperation.mapper.estate.BusEstateMapper;
import com.hifo.dataoperation.mapper.base.Sequence;
import com.hifo.dataoperation.mapper.base.Table;
import com.hifo.dataoperation.entity.*;
import com.hifo.dataoperation.pagination.Pagination;
import com.hifo.dataoperation.service.base.BasicService;
import com.hifo.dataoperation.service.estate.*;
import com.hifo.dataoperation.service.setting.AdministrativeService;
import com.hifo.dataoperation.service.setting.DictionaryService;
import com.hifo.dataoperation.service.upload.UploadService;
import com.hifo.dataoperation.util.*;
import com.hifo.dataoperation.vo.*;
import lombok.extern.java.Log;
import lombok.var;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.bson.Document;
import org.bson.types.ObjectId;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.util.*;
import java.util.concurrent.Future;
import java.util.regex.Pattern;

/**
 * 楼盘Service接口实现类
 *
 * @author xmw
 * @date 2019/4/25 16:21
 */
@Log
@Service
public class BusEstateServiceImpl extends MybatisPlusService<BusEstateMapper, BusEstate> implements BusEstateService {

    public static final String collectName = "community";

    @Autowired
    private BasicService basicService;
    @Autowired
    private BusBuildingService busBuildingService;
    @Autowired
    private BusAvgPriceService avgPriceService;
    @Autowired
    private BusRoomService busRoomService;
    @Autowired
    private BusMergeRelService mergeRelService;
    @Autowired
    private BusVirtualRelService virtualRelService;
    @Autowired
    private DictionaryService dictionaryService;
    @Autowired
    private UploadService uploadService;
    @Autowired
    private AdministrativeService administrativeService;
    @Autowired
    private BusEstateAgentService busEstateAgentService;
    @Autowired
    private BusEstateDao busEstateDao;
    @Autowired
    private BusBuildingDao busBuildingDao;
    @Autowired
    private MongoTemplate mongoTemplate;

    /**
     * 导入成功的楼盘
     */
    private Vector<BusEstate> successList = null;

    /**
     * 导入错误的楼盘
     */
    private Vector<BusEstateFailVO> errorList = null;

    //    @Transactional(value = "hifoTransactionManager", rollbackFor = Exception.class)
    @Override
    public ApiResult update(BusEstate busEstate) {
//        var organizationId = basicService.getLoginEmployee().getOrganizationId();
        //新增
        if (StringUtil.isNull(busEstate.getId())) {
            //检查楼盘是否存在
            Map<String, Object> params = new HashMap<>();
            params.put("cityName", busEstate.getCityName());
            params.put("districtName", busEstate.getDistrictName());
            params.put("name", busEstate.getName());
            params.put("visibility", EntityConstants.PUBLIC);
            List<BusEstate> list = busEstateDao.selectByCondition(params, null, null);
            if (CollectionUtils.isNotEmpty(list)) {
                return ApiResult.failed("新建失败：重复楼盘");
            }
            // 添加楼盘信息
            busEstate.setUpdateTime(new Date());
            busEstate.setCreateDate(new Date());
            busEstateDao.insert(busEstate);
            // 生成均价
//            avgPriceService.updateQuality(busEstate);
        } else {
            BusEstate busEstate1 = busEstateDao.selectById(busEstate.getId(), BusEstate.class);
//            var count = baseMapper.selectCount(new QueryWrapper<BusEstate>().eq("organizationId", organizationId).eq("cityName", busEstate.getCityName()).eq("districtName", busEstate.getDistrictName()).eq("name", busEstate.getName()).ne("visibility", EntityConstants.DELETE).ne("id", busEstate.getId()));
            if (busEstate1 == null) {
                return ApiResult.failed("更新失败：楼盘已存在");
            }

            // 更新楼盘信息
            busEstate.setUpdateTime(new Date());
            busEstateDao.updateById(busEstate1.getId(), busEstate);
//            updateById(busEstate);
        }
        return ApiResult.success(busEstate);
    }


    @Override
    public ApiResult delete(String[] ids) {
        var length = ids.length;
//        for (var i = 0; i < length; i++) {
//            var obj = baseMapper.selectById(ids[i]);
//            if (obj != null) {
//                obj.setVisibility(EntityConstants.DELETE);
//                updateById(obj);
//            }
//        }
        return ApiResult.success("删除成功，共删除" + length + "条数据。");
    }

    @Override
    public ApiResult visibility(String[] ids, String visibility) {
        var length = ids.length;
        for (var i = 0; i < length; i++) {
            Map<String, Object> maps = new HashMap<>();
            maps.put("visibility", visibility);
            busEstateDao.updateByParams(ids[i], maps);
        }
        return ApiResult.success("设置成功，共设置" + length + "条数据。");
    }

    /**
     * @param fromId 待合并楼盘id
     * @param to     目标楼盘
     * @param emp
     */
    @Async
    public void asyncMerge(String fromId, BusEstate to, ExtEmployee emp) {
//         new 删除合并推荐
//        var agent = busEstateAgentService.getOne(new QueryWrapper<BusEstateAgentVO>().eq("fromId", fromId).eq("toId", to.getId()));
//        if (agent != null) {
//            agent.setIsDelete(true);
//            busEstateAgentService.updateByIdAsync(agent, emp);
//        }

        // 2. 合并属性，以to为准，to为空的属性用from的
//        var from = baseMapper.selectById(fromId);
        var from = busEstateDao.selectById(fromId, BusEstate.class);
//        // 为待建楼盘设为正式楼盘
//        if (from.getIsAgent()) {
//            from.setIsAgent(false);
//            updateById(to);
//        }
        to = HkbUtil.copyPropertiesIfNull(from, to);
        // 被合并的楼盘名设置到合并到的楼盘别名
//        to.setAlias(StringUtil.isNotEmpty(to.getAlias()) ? (to.getAlias() + "," + from.getName()) : from.getName());
//        if (StringUtil.isNotEmpty(to.getAddrRef()) && StringUtil.isNotEmpty(from.getAddrRef()) && !to.getAddrRef().equals(from.getAddrRef())) {
//            to.setAddrRef(to.getAddrRef() + "," + from.getAddrRef());
//        }
//        if (StringUtil.isNotEmpty(to.getAddrDetail()) && StringUtil.isNotEmpty(from.getAddrDetail())) {
//            try {
//                List<AddrDetailDTO> toDto = JSONObject.parseArray(to.getAddrDetail(), AddrDetailDTO.class);
//                List<AddrDetailDTO> fromDto = JSONObject.parseArray(from.getAddrDetail(), AddrDetailDTO.class);
//                if (toDto.size() == 1 && StringUtil.isEmpty(toDto.get(0).getRoad()) && StringUtil.isEmpty(toDto.get(0).getNumber())) {
//                    toDto.clear();
//                }
//                List<AddrDetailDTO> finalToDto = toDto;
//                fromDto.stream().forEach(e -> {
//                    if (!finalToDto.contains(e)) {
//                        finalToDto.add(e);
//                    }
//                });
//                to.setAddrDetail(JSONObject.toJSONString(finalToDto));
//            } catch (Exception e) {
//            }
//        }
//        updateById(to, emp);
        //更新目标楼盘
        busEstateDao.updateById(to.getId(), to);

        // 3. 楼栋，从from复制一份到to，相同的楼栋（名称相同）不复制
//        this.mergeBuilding(from, to, emp);
        // 5. 案例，把关联从from修改到to

        // 6. 修改from的状态为merge（visibility=3）
        from.setVisibility(EntityConstants.MERGED);
        from.setIsMerged(true);
        from.setMergeId(to.getId());
        busEstateDao.updateById(fromId, from);

        Map<String, Object> map = new HashMap<>();
        map.put("id", to.getId());
        map.put("visibility", EntityConstants.PUBLIC);
        Long buildingNoNum = busEstateDao.countByCondition(map);
        to.setTotalNumberOfBuildings(String.valueOf(buildingNoNum));
        // 7. 更新楼栋数
//        to.setBuildingNo(busBuildingService.count(new QueryWrapper<BusBuilding>().eq("estateId", to.getId()).eq("visibility", EntityConstants.PUBLIC)));
//        updateById(to, emp);
        busEstateDao.updateById(to.getId(), to);
        // 8.合并均价
//        this.mergeAvgPrice(from, to, emp);
        // 9. 合并记录
        mergeRelService.log(from, to, emp);
    }

    @Override
    public void mergeBuilding(BusEstate from, BusEstate to, ExtEmployee emp) {
//        var buildingListOfFrom = busBuildingService.list(new QueryWrapper<BusBuilding>().eq("estateId", from.getId()));
//        var buildingListOfTo = busBuildingService.list(new QueryWrapper<BusBuilding>().eq("estateId", to.getId()));
//        // 目标楼盘的楼栋标准名称Map
//        Map<String, BusBuilding> nameMapOfTo = new HashMap<>(buildingListOfTo.size());
//        for (BusBuilding building : buildingListOfTo) {
//            nameMapOfTo.put(HkbUtil.stdBuildingName(building.getName()), building);
//        }
//
//        // 遍历源楼盘楼栋
//        for (BusBuilding fromBuilding : buildingListOfFrom) {
//            // 复制楼栋信息
//            BusBuilding newBuilding = new BusBuilding();
//            newBuilding = HkbUtil.copyPropertiesIfNull(fromBuilding, newBuilding);
//            // 格式化建筑类型
//            newBuilding = busBuildingService.getBuildingType(newBuilding, emp);
//            // 指向新楼盘
////            newBuilding.setEstateId(to.getId());
//            // 如果名称已经在目标楼栋中,根据合并规则，隐藏相应的楼栋
//            var toBuilding = nameMapOfTo.get(HkbUtil.stdBuildingName(fromBuilding.getName()));
//            // 获取该被合并楼盘楼栋下所有房号
//            List<BusRoomVO> fromRoomList = busRoomService.list(new QueryWrapper<BusRoomVO>().eq("buildingId", fromBuilding.getId()));
//            if (toBuilding != null) {
//                // 获取该合并楼盘楼栋下所有房号
//                int toRoomCount = busRoomService.count(new QueryWrapper<BusRoomVO>().eq("buildingId", toBuilding.getId()));
//                // 都有房号进入后面的合并规则
//                if ((fromRoomList.size() == 0 && toRoomCount > 0) || (fromRoomList.size() > 0 && toRoomCount == 0)) {
//                    // 规则1.重复楼栋不是都有房号的情况下
//                    // 重复楼栋有房号的显示，没有的隐藏
//                    if (fromRoomList.size() > 0) {
//                        toBuilding.setVisibility(EntityConstants.PRIVATE);
//                        busBuildingService.updateBuildingById(toBuilding, emp);
//                    } else {
//                        newBuilding.setVisibility(EntityConstants.PRIVATE);
//                    }
//                } else {
//                    // 重复楼栋都有房号或都没有房号
//                    // 格式化建筑类型
//                    toBuilding = busBuildingService.getBuildingType(toBuilding, emp);
//                    // 规则2.重复楼栋都有房号,以有建筑类别的为主
//                    if (!(toBuilding.getBuildingType() != null && newBuilding.getBuildingType() != null)) {
//                        if (newBuilding.getBuildingType() == null) {
//                            toBuilding.setVisibility(EntityConstants.PRIVATE);
//                            busBuildingService.updateBuildingById(toBuilding, emp);
//                        } else {
//                            newBuilding.setVisibility(EntityConstants.PRIVATE);
//                        }
//                    } else {
//                        // 建筑类别都不为空
//                        // 规则3 优先以有地上总楼层，再才以有总楼层为打底
//                        if (toBuilding.getFloorOverGroundNo() == null) {
//                            toBuilding.setFloorOverGroundNo(0);
//                        }
//                        if (newBuilding.getFloorOverGroundNo() == null) {
//                            newBuilding.setFloorOverGroundNo(0);
//                        }
//                        if ((toBuilding.getFloorOverGroundNo() > 0 && newBuilding.getFloorOverGroundNo() == 0) || (toBuilding.getFloorOverGroundNo() == 0 && newBuilding.getFloorOverGroundNo() > 0)) {
//                            // 地上总楼层比较
//                            if (newBuilding.getFloorOverGroundNo() > 0) {
//                                toBuilding.setVisibility(EntityConstants.PRIVATE);
//                                busBuildingService.updateBuildingById(toBuilding, emp);
//                            } else {
//                                newBuilding.setVisibility(EntityConstants.PRIVATE);
//                            }
//                        } else {
//                            // 总楼层比较
//                            if (toBuilding.getFloorTotalNo() == null) {
//                                toBuilding.setFloorTotalNo(0);
//                            }
//                            if (newBuilding.getFloorTotalNo() == null) {
//                                newBuilding.setFloorTotalNo(0);
//                            }
//                            if ((toBuilding.getFloorTotalNo() > 0 && newBuilding.getFloorTotalNo() == 0) || (toBuilding.getFloorTotalNo() == 0 && newBuilding.getFloorTotalNo() > 0)) {
//                                if (newBuilding.getFloorTotalNo() > 0) {
//                                    toBuilding.setVisibility(EntityConstants.PRIVATE);
//                                    busBuildingService.updateBuildingById(toBuilding, emp);
//                                } else {
//                                    newBuilding.setVisibility(EntityConstants.PRIVATE);
//                                }
//                            } else {
//                                newBuilding.setVisibility(EntityConstants.PRIVATE);
//                            }
//                        }
//                    }
//                }
//            }
//            // 去掉序列号，说明是新增
//            newBuilding.setId(null);
//            // 保存楼栋
//            newBuilding = busBuildingService.addBuilding(newBuilding, Sequence.seq_bus_building, Table.bus_building, emp);
//            // 4. 楼栋对应的房号，从from复制一份到to
//            for (BusRoomVO room : fromRoomList) {
//                // 复制房号信息
//                BusRoomVO newRoom = new BusRoomVO();
//                newRoom = HkbUtil.copyPropertiesIfNull(room, newRoom);
//                // 指向新楼栋
//                newRoom.setBuildingId(newBuilding.getId());
//                // 去掉序列号，说明是新增
//                newRoom.setId(null);
//                // 保存房号
//                busRoomService.save(newRoom, Sequence.seq_bus_room, Table.bus_room, emp);
//            }
//        }
    }

    /**
     * 合并楼盘均价
     *
     * @param from
     * @param to
     * @param emp
     */
    @Override
    public void mergeAvgPrice(BusEstate from, BusEstate to, ExtEmployee emp) {
//        int toCount = avgPriceService.count(new QueryWrapper<BusEstateAvgPriceExtend>().eq("estateId", to.getId()).ne("visibility", 0));
//        // 当被合并楼盘均价数据为空，则合并均价
//        if (toCount == 0) {
//            int fromCount = avgPriceService.count(new QueryWrapper<BusEstateAvgPriceExtend>().eq("estateId", from.getId()).ne("visibility", 0));
//            if (fromCount > 0) {
//                Pagination page = new Pagination();
//                page.setPages(1);
//                page.setLimit(1);
//                page.setDesc("calDate");
//                var date = ((BusEstateAvgPriceExtend) avgPriceService.page(page, new QueryWrapper<BusEstateAvgPriceExtend>().eq("estateId", from.getId()).isNotNull("calDate").ne("visibility", 0)).getRecords().get(0)).getCalDate();
//                var list = avgPriceService.list(new QueryWrapper<BusEstateAvgPriceExtend>().eq("estateId", from.getId()).eq("calDate", date).ne("visibility", 0));
//                list.stream().forEach(e -> {
//                    e.setEstateId(to.getId());
//                    e.setId(null);
//                    avgPriceService.save(e, Sequence.seq_bus_estate_avg_price, Table.bus_estate_avg_price, emp);
//                });
//            }
//        }
    }


    /**
     * 合并楼盘
     *
     * @param fromIds
     * @param toId
     * @return
     */
    @Override
    public ApiResult merge(String[] fromIds, String toId) {
        var emp = basicService.getLoginEmployee();
        // 1. 获取源楼盘, 目标楼盘
//        var to = baseMapper.selectById(toId);
        var to = busEstateDao.selectById(toId, BusEstate.class);
        if (to == null) {
            return ApiResult.failed("请选择目标楼盘。");
        }
        // 为待建楼盘设为正式楼盘
//        if (to.getIsAgent()) {
//            to.setIsAgent(false);
//            updateById(to);
//        }

        for (int i = 0, len = fromIds.length; i < len; i++) {
            //不能合并自身楼盘
            if (fromIds[i].equals(toId)) {
                continue;
            }
            // 异步合并楼盘
            if (emp != null) {
                asyncMerge(fromIds[i], to, emp);
            }
        }
        try {
            return ApiResult.success("合并成功。");
        } catch (Exception e) {
            log.warning(e.getMessage());
            return ApiResult.success("合并失败。");
        }
    }

    /**
     * 遍历数组
     */
    public static int printArray(String[] array, String value) {
        for (int i = 0; i < array.length; i++) {
            if (value.equalsIgnoreCase(array[i])) {
                return i;
            }
        }
        //当if条件不成立时，默认返回一个负数值-1
        return -1;
    }

    @Transactional(value = "hifoTransactionManager", rollbackFor = Exception.class)
    @Override
    public ApiResult undoMerge(String fromId, String toId) {
//        // 1. 案例，把关联从to修改到from
//
//        // new 去除合并推荐删除
//        var agent = busEstateAgentService.getOne(new QueryWrapper<BusEstateAgentVO>().eq("fromId", fromId).eq("toId", toId));
//        if (agent != null) {
//            agent.setIsDelete(false);
//            busEstateAgentService.updateById(agent);
//        }
//
//        // 2. 修改from的状态为正常（visibility=2）
//        var from = baseMapper.selectById(fromId);
//        from.setVisibility(EntityConstants.PUBLIC);
//        updateById(from);
//        // 3. 更新楼栋数
//        var to = baseMapper.selectById(toId);
//        // 取消合并的别名
//        var alias = to.getAlias();
//        if (alias.indexOf(",") == -1) {
//            alias = to.getAlias().replace(from.getName(), "");
//        } else {
//            String[] arr = StringUtils.split(alias, ",");
//            int index = printArray(arr, from.getName());
//            if (index != -1) {
//                // 把最后一个元素替代指定的元素
//                arr[index] = arr[arr.length - 1];
//                // 数组缩容
//                arr = Arrays.copyOf(arr, arr.length - 1);
//                alias = StringUtils.join(arr, ",");
//            }
//        }
//        to.setAlias(alias);
//        // 取消合并的地址详情
//        var addrRef = to.getAddrRef();
//        if (addrRef.indexOf(",") == -1) {
//            if (StringUtil.isNotEmpty(to.getAddrRef())) {
//                addrRef = to.getAddrRef().replace(from.getAddrRef(), "");
//            }
//        } else {
//            String[] arr = StringUtils.split(addrRef, ",");
//            int index = printArray(arr, from.getAddrRef());
//            if (index != -1) {
//                // 把最后一个元素替代指定的元素
//                arr[index] = arr[arr.length - 1];
//                // 数组缩容
//                arr = Arrays.copyOf(arr, arr.length - 1);
//                addrRef = StringUtils.join(arr, ",");
//            }
//        }
//        to.setAddrRef(addrRef);
//
//        to.setBuildingNo(busBuildingService.count(new QueryWrapper<BusBuilding>().eq("estateId", toId).eq("visibility", EntityConstants.PUBLIC)));
//        updateById(to);
//        // 4. 删除合并记录
//        mergeRelService.delete(Long.parseLong(fromId));
        return ApiResult.success("取消合并成功。");
    }

    @Transactional(value = "hifoTransactionManager", rollbackFor = Exception.class)
    @Override
    public ApiResult virtual(String[] fromIds, String toId) {
        var length = fromIds.length;
        // 1. 获取源楼盘, 目标楼盘
        var to = busEstateDao.selectById(toId, BusEstate.class);
        // 2. to的状态改为：虚拟
        to.setVisibility(EntityConstants.VIRTUAL);
        busEstateDao.updateById(toId, to);
        for (var i = 0; i < length; i++) {
            // 3. 虚拟记录
            virtualRelService.log(fromIds[i], toId);
            // TODO 和虚拟楼盘的关系

        }
        return ApiResult.success("虚拟化成功，共设置" + length + "条数据。");
    }

    @Override
    public ApiResult undoVirtual(String fromId) {
        var list = virtualRelService.listByFromId(fromId);
        if (CollectionUtils.isNotEmpty(list) && list.size() == 1) {
            // 1. 修改to的状态为正常
            var from = busEstateDao.selectById(list.get(0).getToId(), BusEstate.class);
            if (EntityConstants.PRIVATE.equals(from.getVisibility())) {
                from.setVisibility(EntityConstants.PUBLIC);
            }
            from.setIsVirtual("0");
            busEstateDao.updateById(from.getId(), from);
        }
        // 2. 删除虚拟记录
        virtualRelService.delete(fromId);
        return ApiResult.success("取消虚拟化成功。");
    }

    @Transactional(value = "hifoTransactionManager", rollbackFor = Exception.class)
    @Override
    public ApiResult evaluate(String[] ids, String canEvaluate) {
        var length = ids.length;
        return ApiResult.success("设置成功，共设置" + length + "条数据。");
    }

    @Override
    public Pagination<BusEstate> findByPage(BusEstate busEstate, Pagination page) {
        var map = administrativeService.getMapByParentId(busEstate.getCityId());
        var employee = basicService.getLoginEmployee();
        Query query = findListQuery(busEstate, employee, page);
        Pagination<BusEstate> busEstatesList = busEstateDao.getPageLists(page.getPage(), page.getLimit(), query);
        busEstatesList.getRecords().stream().forEach(e -> {
            if (StringUtil.isEmpty(e.getCityId())) {
                e.setCityName(map.get(e.getCityId()));
            }
            if (StringUtil.isEmpty(e.getDistrictId())) {
                e.setDistrictName(map.get(e.getDistrictId()));
            }
        });

        return busEstatesList;
    }

    /**
     * 格式化列表查询条件
     *
     * @param busEstate
     * @param employee
     * @param page
     * @return
     */
    public static Query findListQuery(BusEstate busEstate, ExtEmployee employee, Pagination page) {
//        // 设置机构
        Query query = new Query();
        Criteria criteria = new Criteria();
        if (StringUtil.isNotEmpty(busEstate.getCityId())) {
            criteria.and("cityId").is(busEstate.getCityId());
        }
        if (StringUtil.isNotEmpty(busEstate.getDistrictId())) {
            criteria.and("districtId").is(busEstate.getDistrictId());
        }
        if (StringUtil.isNotEmpty(busEstate.getDistrictName())) {
            criteria.and("districtName").is(busEstate.getDistrictName());
        }
        if (StringUtil.isNotEmpty(busEstate.getName())) {
            Pattern pattern = Pattern.compile("^.*" + busEstate.getName() + ".*$", Pattern.CASE_INSENSITIVE);
            criteria.orOperator(Criteria.where("name").regex(pattern),
                    Criteria.where("otherName").regex(pattern),
                    Criteria.where("otherAddress").regex(pattern)
            );
        }
        if (StringUtil.isNotEmpty(busEstate.getIsSpecial())) {
            criteria.and("isSpecial").is(busEstate.getIsSpecial());
        }
        if (StringUtil.isNotEmpty(busEstate.getVisibility())) {
            criteria.and("visibility").is(busEstate.getVisibility());
        }
        if (StringUtil.isNotEmpty(busEstate.getIsVirtual())) {
            criteria.and("isVirtual").is(busEstate.getIsVirtual());
        }
        // 是否是代建楼盘
        query.addCriteria(criteria);
        if (StringUtil.isEmpty(page.ascs()) && StringUtil.isEmpty(page.descs())) {
            query.with(new Sort(new Sort.Order(Sort.Direction.DESC, "updateTime")));
        }
        return query;
    }

    /**
     * 获取楼盘合并记录
     *
     * @param id
     * @return
     */
    @Override
    public ApiResult<List<BusEstate>> getMergeListByToId(String id) {
        List<BusMergeRel> mergelogList = mergeRelService.listByToId(id);
        var size = mergelogList.size();
        if (size == 0) {
            return ApiResult.success(new ArrayList<>());
        }
        String[] idArr = new String[size];
        for (var i = 0; i < size; i++) {
            idArr[i] = mergelogList.get(i).getFromId();
        }
        Query query = new Query();
        Criteria criteria = new Criteria();
        criteria.in(idArr);
        query.addCriteria(criteria);
        List<BusEstate> list = mongoTemplate.find(query, BusEstate.class);
        return ApiResult.success(list);
    }

    @Override
    public ApiResult<List<BusEstate>> getVirtualListByFromId(String id) {
        List<BusVirtualRel> virtualLogList = virtualRelService.listByFromId(id);
        var size = virtualLogList.size();
        if (size == 0) {
            return ApiResult.success(new ArrayList<>());
        }
        String[] idArr = new String[size];
        for (var i = 0; i < size; i++) {
            idArr[i] = virtualLogList.get(i).getFromId();
        }
        Query query = new Query();
        Criteria criteria = new Criteria();
        criteria.in(idArr);
        query.addCriteria(criteria);
        List<BusEstate> list = mongoTemplate.find(query, BusEstate.class);
        return ApiResult.success(list);
//        return ApiResult.success(formatEstateAddrDetail(baseMapper.selectList(new QueryWrapper<BusEstate>().in("id", idArr))));
    }

    @Override
    public ApiResult<List<BusEstate>> getVirtualListByToId(String id) {
        List<BusVirtualRel> virtualLogList = virtualRelService.listByToId(id);
        var size = virtualLogList.size();
        if (size == 0) {
            return ApiResult.success(new ArrayList<>());
        }
        String[] idArr = new String[size];
        for (var i = 0; i < size; i++) {
            idArr[i] = virtualLogList.get(i).getFromId();
        }
        Query query = new Query();
        Criteria criteria = new Criteria();
        criteria.in(idArr);
        query.addCriteria(criteria);
        List<BusEstate> list = mongoTemplate.find(query, BusEstate.class);
        return ApiResult.success(list);
    }

    /**
     * 格式化地址信息
     *
     * @param list
     * @return
     */
    public List<BusEstate> formatEstateAddrDetail(List<BusEstate> list) {
        return list;
    }

    /**
     * 更新已建楼栋
     *
     * @param id 楼盘id
     */
    @Override
    public void updateBuildingNo(String id) {
        Document document = new Document("_id",new ObjectId(id));
        Document d =mongoTemplate.getCollection("community").find(document).first();
        if (d!=null){
            Query query = new Query();
            Criteria criteria = new Criteria();
            criteria.and("communityId").is(id);
            criteria.and("isDeleted").ne(1);
            criteria.and("visibility").ne("0");
            query.addCriteria(criteria);
            Long count=mongoTemplate.count(query,BusBuilding.class);
            d.append("totalNumberOfBuildings",count.toString());
            mongoTemplate.getCollection("community").updateOne(document,new Document("$set",d));

        }
    }

    /**
     * 更新已建房号数
     *
     * @param id 楼盘id
     */
    @Override
    public void updateRoomNo(String id) {
        var obj = baseMapper.selectById(id);
        updateById(obj);
    }

    @Override
    public List<BusEstate> queryByParam(BusEstate busEstate) {
        QueryWrapper<BusEstate> queryWrapper = new QueryWrapper<BusEstate>();
        queryWrapper.eq("cityName", busEstate.getCityName());
        queryWrapper.eq("districtName", busEstate.getDistrictName());
        return baseMapper.selectList(queryWrapper);
    }

    @Override
    public IPage findListsByPage(Pagination page, BusEstate busEstate) {
        return null;
    }

    @Override
    public IPage findMapsByPage(Pagination page, BusEstate busEstate) {
        return null;
    }

    /**
     * 判断是否为正确楼盘（用于导入判断）
     *
     * @param busEstate 楼盘
     * @return 返回空表示没有错误信息没
     */
    public String getErrMsgByImport(BusEstate busEstate, ExtEmployee emp) {
        // 判断数据有效性
        if (busEstate == null) {
            return "空楼盘";
        }
        if (StringUtil.isNull(busEstate.getCityName())) {
            return "缺少必要信息：城市";
        }
        if (StringUtil.isNull(busEstate.getDistrictName())) {
            return "缺少必要信息：行政区";
        }
        return null;
    }

    @Async
    public void executeAsyncByBusEstate(Map<String, Integer> dictMap, BusEstate m, ExtEmployee emp) {

    }

    @Override
    public String importEstate(MultipartFile file) throws Exception {
        // excel转list
        List<BusEstate> list = ExcelUtil.importExcel(file, 1, 1, BusEstate.class);
        var size = list.size();
        if (size == 0) {
            return "空文件";
        }

        // 字典map
        var dictMap = new HashMap<String, Integer>(50);
//        var maps = dictionaryService.listMaps(new QueryWrapper<>());
//        for (var i = 0; i < maps.size(); i++) {
//            dictMap.put((String) maps.get(i).get("item"), (Integer) maps.get(i).get("id"));
//        }
        var emp = basicService.getLoginEmployee();
        // 重新设置
        successList = new Vector<>();
        errorList = new Vector<>();
        // 楼盘数据入库
        List<Future> futureList = new ArrayList<>();
        if (emp != null) {
            for (var i = 0; i < size; i++) {
                int finalI = i;
                Future future = CommonThreadPool.submit(() -> {
                    executeAsyncByBusEstate(dictMap, list.get(finalI), emp);
                });
                futureList.add(future);
            }
            for (Future f : futureList) {
                f.get();
            }
        }
        // 批量插入楼盘
        if (successList.size() > 0) {
            insertBatch(successList, Sequence.seq_bus_estate, Table.bus_estate);
        }
        // 下载导入的错误数据excel
        var errorSize = errorList.size();
        File failedFile = uploadService.downloadFailedFile(new ExportParams("导入错误楼盘信息", "失败数据"), BusEstateFailVO.class, errorList);
        // 记录上传日志
        uploadService.save(file.getOriginalFilename(), size - errorSize, errorSize, failedFile.getAbsolutePath(), "楼盘");
        return failedFile.getAbsolutePath();
    }

    /**
     * 数据字典数据转换
     *
     * @param map
     * @param ids
     * @return
     */
    public static String formatDictByIds(Map<Integer, String> map, String ids) {
        var s = StringUtils.split(ids, ",");
        for (var i = 0; i < s.length; i++) {
            if (StringUtil.isNull(s[i])) {
                s[i] = "";
            } else {
                s[i] = map.get(Integer.parseInt(s[i]));
            }
        }
        return StringUtils.join(s, ",");
    }

    /**
     * 数据字典数据转换
     *
     * @param map
     * @param items
     * @return
     */
    public static String formatDictByItems(Map<String, Integer> map, String items) {
        var s = StringUtils.split(items, ",");
        for (var i = 0; i < s.length; i++) {
            if (Double.isNaN(map.get(s[i]))) {
                s[i] = "";
            } else {
                s[i] = map.get(s[i]) + "";
            }
        }
        return StringUtils.join(s, ",");
    }

    @Transactional(value = "hifoTransactionManager", rollbackFor = Exception.class)
    @Override
    public ApiResult agent(String[] ids) {
        var length = ids.length;
//        for (var i = 0; i < length; i++) {
//            var obj = baseMapper.selectById(ids[i]);
//            if (obj != null) {
//                obj.setIsAgent(false);
//                updateById(obj);
//                // 生成均价
//                avgPriceService.updateQuality(obj);
//            }
//        }
        return ApiResult.success("新建成功，共新建" + length + "个楼盘。");
    }

    @Override
    public BusEstate getDetailById(String id) {
        BusEstate busEstate = busEstateDao.selectById(id, BusEstate.class);

        return busEstate;
    }

}

